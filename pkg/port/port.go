package port

import (
	"context"

	log "github.com/sirupsen/logrus"
)

// CommandProcessor ...
type CommandProcessor func(context.Context, string)

// ProcessMessages handles messages of the Erlang Port format along the
// following lines:
//   a           = []byte{0x83, 0x64, 0x0, 0x1, 0x61, 0xa}
//   "a"         = []byte{0x83, 0x6b, 0x0, 0x1, 0x61, 0xa}
//   {}          = []byte{0x83, 0x68, 0x0, 0xa}
//   {a}         = []byte{0x83, 0x68, 0x1, 0x64, 0x0, 0x1, 0x61, 0xa}
//   {"a"}       = []byte{0x83, 0x68, 0x1, 0x6b, 0x0, 0x1, 0x61, 0xa}
//   {a, a}      = []byte{0x83, 0x68, 0x2, 0x64, 0x0, 0x1, 0x61, 0x64, 0x0, 0x1, 0x61, 0xa}
//   {a, test}   = []byte{0x83, 0x68, 0x2, 0x64, 0x0, 0x1, 0x61, 0x64, 0x0, 0x4, 0x74, 0x65, 0x73, 0x74, 0xa}
//   {a, "test"} = []byte{0x83, 0x68, 0x2, 0x64, 0x0, 0x1, 0x61, 0x6b, 0x0, 0x4, 0x74, 0x65, 0x73, 0x74, 0xa}
func ProcessMessages(ctx context.Context, fn CommandProcessor) {
	log.Info("Processing messages sent to Go language server ...")
	go func() {
		for {
			cmd := ProcessExecMessage()
			// cmd := ProcessPortMessage()
			if cmd == "continue" {
				continue
			}
			fn(ctx, cmd)

		}
	}()
	<-ctx.Done()
}
