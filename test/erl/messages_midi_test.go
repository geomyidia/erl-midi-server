package erl

// Basic imports
import (
	"testing"

	"github.com/stretchr/testify/suite"

	"github.com/geomyidia/midiserver/pkg/erl"
	"github.com/geomyidia/midiserver/pkg/erl/messages"
	"github.com/geomyidia/midiserver/pkg/erl/packets"
	"github.com/geomyidia/midiserver/pkg/types"
)

type MidiMessageTestSuite struct {
	suite.Suite
	batch interface{}
	meter interface{}
	tempo interface{}
}

func (suite *MidiMessageTestSuite) SetupTest() {
	batchBytes := []byte{0x38, 0x33, 0x36, 0x38, 0x30, 0x32, 0x36, 0x34, 0x30, 0x30, 0x30, 0x34, 0x36, 0x44, 0x36, 0x39, 0x36, 0x34, 0x36, 0x39, 0x36, 0x38, 0x30, 0x32, 0x36, 0x34, 0x30, 0x30, 0x30, 0x35, 0x36, 0x32, 0x36, 0x31, 0x37, 0x34, 0x36, 0x33, 0x36, 0x38, 0x36, 0x43, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x33, 0x36, 0x38, 0x30, 0x32, 0x36, 0x34, 0x30, 0x30, 0x30, 0x36, 0x36, 0x34, 0x36, 0x35, 0x37, 0x36, 0x36, 0x39, 0x36, 0x33, 0x36, 0x35, 0x36, 0x31, 0x30, 0x30, 0x36, 0x38, 0x30, 0x32, 0x36, 0x34, 0x30, 0x30, 0x30, 0x35, 0x36, 0x44, 0x36, 0x35, 0x37, 0x34, 0x36, 0x35, 0x37, 0x32, 0x36, 0x43, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x32, 0x36, 0x38, 0x30, 0x32, 0x36, 0x34, 0x30, 0x30, 0x30, 0x39, 0x36, 0x45, 0x37, 0x35, 0x36, 0x44, 0x36, 0x35, 0x37, 0x32, 0x36, 0x31, 0x37, 0x34, 0x36, 0x46, 0x37, 0x32, 0x36, 0x31, 0x30, 0x34, 0x36, 0x38, 0x30, 0x32, 0x36, 0x34, 0x30, 0x30, 0x30, 0x42, 0x36, 0x34, 0x36, 0x35, 0x36, 0x45, 0x36, 0x46, 0x36, 0x44, 0x36, 0x39, 0x36, 0x45, 0x36, 0x31, 0x37, 0x34, 0x36, 0x46, 0x37, 0x32, 0x36, 0x31, 0x30, 0x34, 0x36, 0x41, 0x36, 0x38, 0x30, 0x32, 0x36, 0x34, 0x30, 0x30, 0x30, 0x39, 0x37, 0x34, 0x36, 0x35, 0x36, 0x44, 0x37, 0x30, 0x36, 0x46, 0x35, 0x46, 0x36, 0x32, 0x37, 0x30, 0x36, 0x44, 0x36, 0x31, 0x34, 0x34, 0x36, 0x41, 0xa}
	meterBytes := []byte{0x38, 0x33, 0x36, 0x38, 0x30, 0x32, 0x36, 0x34, 0x30, 0x30, 0x30, 0x34, 0x36, 0x44, 0x36, 0x39, 0x36, 0x34, 0x36, 0x39, 0x36, 0x38, 0x30, 0x32, 0x36, 0x34, 0x30, 0x30, 0x30, 0x35, 0x36, 0x44, 0x36, 0x35, 0x37, 0x34, 0x36, 0x35, 0x37, 0x32, 0x36, 0x43, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x32, 0x36, 0x38, 0x30, 0x32, 0x36, 0x34, 0x30, 0x30, 0x30, 0x39, 0x36, 0x45, 0x37, 0x35, 0x36, 0x44, 0x36, 0x35, 0x37, 0x32, 0x36, 0x31, 0x37, 0x34, 0x36, 0x46, 0x37, 0x32, 0x36, 0x31, 0x30, 0x34, 0x36, 0x38, 0x30, 0x32, 0x36, 0x34, 0x30, 0x30, 0x30, 0x42, 0x36, 0x34, 0x36, 0x35, 0x36, 0x45, 0x36, 0x46, 0x36, 0x44, 0x36, 0x39, 0x36, 0x45, 0x36, 0x31, 0x37, 0x34, 0x36, 0x46, 0x37, 0x32, 0x36, 0x31, 0x30, 0x34, 0x36, 0x41, 0xa}
	tempoBytes := []byte{0x38, 0x33, 0x36, 0x38, 0x30, 0x32, 0x36, 0x34, 0x30, 0x30, 0x30, 0x34, 0x36, 0x44, 0x36, 0x39, 0x36, 0x34, 0x36, 0x39, 0x36, 0x38, 0x30, 0x32, 0x36, 0x34, 0x30, 0x30, 0x30, 0x39, 0x37, 0x34, 0x36, 0x35, 0x36, 0x44, 0x37, 0x30, 0x36, 0x46, 0x35, 0x46, 0x36, 0x32, 0x37, 0x30, 0x36, 0x44, 0x36, 0x31, 0x34, 0x34, 0xa}
	opts := &erl.Opts{IsHexEncoded: true}
	bPkt, _ := packets.NewPacket(batchBytes, opts)
	suite.batch, _ = bPkt.Term()
	mPkt, _ := packets.NewPacket(meterBytes, opts)
	suite.meter, _ = mPkt.Term()
	tPkt, _ := packets.NewPacket(tempoBytes, opts)
	suite.tempo, _ = tPkt.Term()

}

func (suite *MidiMessageTestSuite) TestConvertTempo() {
	converted, err := messages.Convert(suite.tempo)
	suite.NoError(err)
	suite.Equal(types.MidiTempoType(), converted[0].Op)
	suite.Equal(uint8(68), converted[0].Args.Tempo)
}

func (suite *MidiMessageTestSuite) TestConvertMeter() {
	converted, err := messages.Convert(suite.meter)
	suite.NoError(err)
	suite.Equal(types.MidiMeterType(), converted[0].Op)
	suite.Equal(uint8(4), converted[0].Args.Meter.Numerator)
	suite.Equal(uint8(4), converted[0].Args.Meter.Denominator)
}

func (suite *MidiMessageTestSuite) TestConvertBatch() {
	converted, err := messages.Convert(suite.batch)
	suite.NoError(err)
	suite.Equal(3, len(converted))
	suite.Equal(types.MidiDeviceType(), converted[0].Op)
	suite.Equal(uint8(0), converted[0].Args.Device)
	suite.Equal(types.MidiMeterType(), converted[1].Op)
	suite.Equal(uint8(4), converted[1].Args.Meter.Numerator)
	suite.Equal(uint8(4), converted[1].Args.Meter.Denominator)
	suite.Equal(types.MidiTempoType(), converted[2].Op)
	suite.Equal(uint8(68), converted[2].Args.Tempo)
}

// In order for 'go test' to run this suite, we need to create
// a normal test function and pass our suite to suite.Run
func TestMidiMessageTestSuite(t *testing.T) {
	suite.Run(t, new(MidiMessageTestSuite))
}
